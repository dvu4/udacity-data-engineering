import os
import glob
import psycopg2
import pandas as pd
from sql_queries import *


# song_data is a subset of real data from the Million Song Dataset. 
# Each file is in JSON format and contains metadata about a song and the artist of that song. 
# The files are partitioned by the first three letters of each song's track ID.

# TRAAAAW128F429D538.json file looks like : 
#{
#    "num_songs": 1, 
#    "artist_id": "ARD7TVE1187B99BFB1", 
#    "artist_latitude": null, 
#    "artist_longitude": null, 
#    "artist_location": "California - LA", 
#    "artist_name": "Casual", 
#    "song_id": "SOMZWCG12A8C13C480", 
#    "title": "I Didn't Mean To", 
#    "duration": 218.93179, 
#    "year": 0
#}


def process_song_file(cur, filepath):
    """
        This function reads JSON file and insert record into Postgres Database
        param cur : database cursor
        param filepath : location of JSON
    """
    # open song file 
    df = pd.read_json(filepath, lines=True)

    # insert song record
    # song data record : songs (song_id, title, artist_id, year, duration)
    song_data = df[["song_id", "title", "artist_id", "year", "duration"]].values[0].tolist()
    cur.execute(song_table_insert, song_data)
    

    # insert artist record
    # artist data record : artists (artist_id, name, location, latitude, longitude) 
    artist_data = df[["artist_id", "artist_name", "artist_location",  "artist_latitude", "artist_longitude"]].values[0].tolist()
    cur.execute(artist_table_insert, artist_data)


    
# log_data is the second dataset consists of log files in JSON format generated by this event simulator based on the songs in the dataset above. 
# These simulate activity logs from a music streaming app based on specified configurations.

# 2018-11-01-events.json file looks like : 
#{
#    "artist":"Barry Tuckwell\/Academy of St Martin-in-the-Fields\/Sir Neville Marriner",
#    "auth":"Logged In",
#    "firstName":"Celeste",
#    "gender":"F",
#    "itemInSession":1,
#    "lastName":"Williams",
#    "length":277.15873,
#    "level":"free",
#    "location":"Klamath Falls, OR",
#    "method":"PUT",
#    "page":"NextSong",
#    "registration":1541077528796.0,
#    "sessionId":438,"song":"Horn Concerto No. 4 in E flat K495: II. Romance (Andante cantabile)",
#    "status":200,
#    "ts":1541990264796,
#    "userAgent":"\"Mozilla\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/37.0.2062.103 Safari\/537.36\"",
#    "userId":"53"
#}    

def process_log_file(cur, filepath):
    
    # open log file
    df = pd.read_json(filepath, lines=True)

    # filter by NextSong action
    df = df[df["page"] =="NextSong"]

    # convert timestamp column to datetime
    t = pd.to_datetime(df["ts"], unit='ms')
    df["ts"] = pd.to_datetime(df["ts"], unit='ms')
    
    # insert time data records
    # time data record : time (start_time, hour , day, week, month, year, weekday)
    time_data = list((t, t.dt.hour, t.dt.day, t.dt.weekofyear, t.dt.month, t.dt.year, t.dt.day_name()))
    column_labels = list(("start_time", "hour", "day", "week", "month", "year", "weekday"))
    time_df = pd.DataFrame.from_dict(dict(zip(column_labels, time_data)))

    
    for i, row in time_df.iterrows():
        cur.execute(time_table_insert, list(row))
        
        
    # load user table
    # user data record : users (user_id, first_name, last_name, gender, level)
    user_df = df[["userId", "firstName", "lastName", "gender", "level"]]

    # insert user records
    for i, row in user_df.iterrows():
        cur.execute(user_table_insert, row)

                                                              
                                                                    
    # insert songplay records
    for index, row in df.iterrows():
        
        # get songid and artistid from song and artist tables
        cur.execute(song_select, (row.song, row.artist, row.length))
        results = cur.fetchone()
        
        if results:
            songid, artistid = results
        else:
            songid, artistid = None, None

       
        # insert songplay record
        # songplay data record : songplays (songplay_id , start_time , user_id , level, song_id ,artist_id , session_id, location , user_agent)
        songplay_data = (index, row.ts, row.userId, row.level, songid, artistid, row.sessionId, row.location, row.userAgent)
        cur.execute(songplay_table_insert, songplay_data)


def process_data(cur, conn, filepath, func):
    # get all files matching extension from directory
    all_files = []
    for root, dirs, files in os.walk(filepath):
        files = glob.glob(os.path.join(root,'*.json'))
        for f in files :
            all_files.append(os.path.abspath(f))

    # get total number of files found
    num_files = len(all_files)
    print('{} files found in {}'.format(num_files, filepath))

    # iterate over files and process
    for i, datafile in enumerate(all_files, 1):
        func(cur, datafile)
        conn.commit()
        print('{}/{} files processed.'.format(i, num_files))


def main():
    conn = psycopg2.connect("host=127.0.0.1 dbname=sparkifydb user=student password=student")
    cur = conn.cursor()

    process_data(cur, conn, filepath='data/song_data', func=process_song_file)
    process_data(cur, conn, filepath='data/log_data', func=process_log_file)

    conn.close()


if __name__ == "__main__":
    main()